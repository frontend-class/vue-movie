#components > MovieCardList.spec.js
import { shallowMount, mount, createLocalVue } from '@vue/test-utils';
import Vuex from 'vuex';
import MovieCardList from '@/components/MovieCardList.vue';
import MovieCard from '@/components/MovieCard.vue';

const localVue = createLocalVue();
localVue.use(Vuex);

describe('MovieCardList', () => {
    let store;
    let mutations;

    const mockOpenMovieDetail = jest.fn();
    beforeEach(() => {
        mutations = {
            openMovieDetail: mockOpenMovieDetail
        }
        store = new Vuex.Store({
            state: {
                isMovieDetailOpen: false,
                movies: [],
            },
            mutations,
        });
    });

    it('should exist MovieCard when passed props.movise with a movie', () => {
        const wrapper = shallowMount(MovieCardList, {
            propsData: {
                titleName: '',
                movies: [{
                    id: 1,
                }],
            }
        });

        expect(wrapper.find(MovieCard).exists()).toBe(true);
    });

    it('should commit openMovieDetail when MovieCard clicked', () => {
        const wrapper = mount(MovieCardList, {
            store,
            localVue,
            propsData: {
                titleName: '',
                movies: [{
                    id: 1,
                }],
            }
        });

        wrapper.find(MovieCard).trigger('click', {});

        expect(mockOpenMovieDetail.mock.calls.length).toBe(1);
    });
});


#components > StarPoint.spec.js
import { shallowMount, mount } from '@vue/test-utils';
import StarPoint from '@/components/StarPoint.vue';

describe('StarPoint', () => {
  it('should exist component', () => {
    const wrapper = shallowMount(StarPoint);

    expect(wrapper.is(StarPoint)).toBe(true);
    expect(wrapper.exists()).toBe(true);
  });

  it('should passed props.point ', () => {
    const point = 1;

    const wrapper = shallowMount(StarPoint, {
      propsData: {
        point
      }
    });

    expect(wrapper.props().point).toBe(1);
  });
  it('should be inexist a star when passed props.point with 0', () => {
    const point = 0;

    const wrapper = shallowMount(StarPoint, {
      propsData: {
        point
      }
    });
 
    expect(wrapper.find('.star').exists()).toBe(false);
  });

  it('should be exist one star when passed props.point with 1', () => {
    const point = 5;
    
    const wrapper = shallowMount(StarPoint, {
      propsData: {
        point
      }
    });

    expect(wrapper.findAll('.star').length).toBe(3);
  });
});

#services > movie-service.spec.js
import {fetchAllMovies} from '@/services/movie-service';

describe('movie service', () => {
  it('should return array', async () => {
    const resp = [];

    const fakeFetch = jest.fn().mockImplementation( ()=> Promise.resolve({
      json: () => Promise.resolve(resp)
    }));
    window.fetch = fakeFetch;

    const json = await fetchAllMovies();

    expect(json).toEqual([]);
    expect(fakeFetch.mock.calls.length).toBe(1);
    expect(fakeFetch.mock.calls[0]).toContain('http://localhost:3000/movies');
  });
});

#store > actions.spec.js
import { actions } from '@/store';
import * as movie from '@/services/movie-service.js';

describe('actions', () => {
    it('getMovieList', async () => {
        const resp = [];
        movie.fetchAllMovies = jest.fn().mockResolvedValue(resp);
        
        const commit = jest.fn();

        await actions.getMovieList({commit});

        expect(commit.mock.calls.length).toBe(1);
        expect(commit.mock.calls[0][0]).toBe('setMovies');
        expect(commit.mock.calls[0][1]).toBe(resp);
    });
});


#store > getters.spec.js
import { getters } from '@/store.js';

describe('getters', () => {
    const state = {
        movies: [
            {releaseDate: '2018.11.20'},
            {releaseDate: '2018.11.21'},
            {releaseDate: '2018.11.22'},
        ]
    };

    it('releasedMovies', () => {
        const relMovies = getters.releasedMovies(state);
        expect(relMovies.length).toBe(2);
    });

    it('upcomingMovies', () => {
        const relMovies = getters.upcomingMovies(state);
        expect(relMovies.length).toBe(1);
    });
});

#store > mutations.spec.js
import { mutations } from '@/store.js';

describe('mutations', () => {
    it('openMovieDetail', () => {
        const { openMovieDetail } = mutations;

        const state = {
            isMovieDetailOpen: false,
            movie: undefined,
        };
        const payload = {
            id: 1,
        };
        openMovieDetail(state, payload);

        expect(state.isMovieDetailOpen).toBe(true);
        expect(state.movie.id).toBe(1);
    });
});

#views > Movie.spec.js

import { shallowMount, createLocalVue } from '@vue/test-utils';
import Vuex from 'vuex';
import Movie from '@/views/Movie.vue';
import MovieDetail from '@/components/MovieDetail.vue';

const localVue = createLocalVue();

localVue.use(Vuex);

describe('Movie.vue', () => {
    let getters;
    let actions;
    let store;
    let mutations;

    beforeEach(() => {
        getters = {
            releasedMovies: jest.fn(),
            upcomingMovies: jest.fn(),
        };
        actions = {
            getMovieList: jest.fn(),
        };
        mutations = {
            openMovieDetail (state, payload) {
                state.isMovieDetailOpen = true;
                state.movie = payload;
            },
        }
        store = new Vuex.Store({
            state: {
                isMovieDetailOpen: false,
                movies: [],
            },
            getters,
            actions,
            mutations,
        });
    });
    it('should dispatchs getMovieList when mounted', () => {
        const wrapper = shallowMount(Movie, { store, localVue });

        expect(actions.getMovieList.mock.calls.length).toBe(1);
    });

    it('should show MovieDetail when isMovieDetailOpen is true', () => {
        const wrapper = shallowMount(Movie, { store, localVue });

        expect(wrapper.find(MovieDetail).isVisible()).toBe(false);
    });

    it('should show MovieDetail when isMovieDetailOpen is true', () => {
        const wrapper = shallowMount(Movie, { store, localVue });

        store.commit('openMovieDetail', {});

        expect(wrapper.find(MovieDetail).isVisible()).toBe(true);
    });
});
